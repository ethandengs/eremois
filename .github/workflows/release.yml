name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      uses: actions/github-script@v6
      with:
        script: |
          const { execSync } = require('child_process');
          
          // Get the latest tag
          const latestTag = execSync('git describe --tags --abbrev=0').toString().trim();
          const previousTag = execSync(`git describe --tags --abbrev=0 ${latestTag}^`).toString().trim();
          
          // Get commits between tags
          const commits = execSync(`git log ${previousTag}..${latestTag} --pretty=format:"- %s (%h)"`).toString();
          
          // Group commits by type
          const types = {
            feat: '🚀 Features',
            fix: '🐛 Bug Fixes',
            docs: '📚 Documentation',
            style: '💎 Styles',
            refactor: '♻️ Code Refactoring',
            perf: '⚡️ Performance Improvements',
            test: '🧪 Tests',
            build: '🛠️ Build System',
            ci: '⚙️ CI',
            chore: '🧹 Chores',
            revert: '⏪️ Reverts'
          };
          
          const changes = {};
          commits.split('\n').forEach(commit => {
            const match = commit.match(/^- (\w+)(?:\(.*?\))?:/);
            if (match) {
              const type = match[1];
              const group = types[type] || '🔍 Other Changes';
              changes[group] = changes[group] || [];
              changes[group].push(commit);
            }
          });
          
          // Format changelog
          let changelog = `## What's Changed\n\n`;
          Object.entries(changes).forEach(([group, commits]) => {
            if (commits.length > 0) {
              changelog += `### ${group}\n${commits.join('\n')}\n\n`;
            }
          });
          
          return changelog;

    - name: Create Release
      uses: actions/github-script@v6
      with:
        script: |
          const tag = context.ref.replace('refs/tags/', '');
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: ${{ steps.changelog.outputs.result }},
            draft: false,
            prerelease: false,
            generate_release_notes: true
          });
          
          return release.id;

    - name: Build Frontend
      run: |
        cd apps/web
        npm ci
        npm run build
        cd dist
        zip -r ../../frontend.zip .

    - name: Build Backend
      run: |
        cd apps/api
        npm ci
        npm run build
        cd dist
        zip -r ../../backend.zip .

    - name: Upload Frontend Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./frontend.zip
        asset_name: frontend.zip
        asset_content_type: application/zip

    - name: Upload Backend Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./backend.zip
        asset_name: backend.zip
        asset_content_type: application/zip

    - name: Build and Push Docker Images
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
        # Build and push frontend
        docker build -t eremois/frontend:${{ github.ref_name }} -t eremois/frontend:latest ./apps/web
        docker push eremois/frontend:${{ github.ref_name }}
        docker push eremois/frontend:latest
        
        # Build and push backend
        docker build -t eremois/backend:${{ github.ref_name }} -t eremois/backend:latest ./apps/api
        docker push eremois/backend:${{ github.ref_name }}
        docker push eremois/backend:latest

    - name: Create Discussion
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.discussions.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Release ${context.ref.replace('refs/tags/', '')} Discussion`,
            body: `## Release ${context.ref.replace('refs/tags/', '')}
            
            This discussion thread is for the latest release of erēmois. Feel free to:
            
            - Ask questions about the new features
            - Report any issues you encounter
            - Share your feedback
            - Suggest improvements
            
            Please refer to the [release notes](${context.payload.release.html_url}) for details about what's new.`,
            category_id: 'DIC_kwDOA1_2Hs4CU5zL'  # Replace with your discussion category ID
          });

    - name: Notify Release
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: 'releases'
        slack-message: |
          :rocket: New release published: ${{ github.ref_name }}
          
          Check out the release notes: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 