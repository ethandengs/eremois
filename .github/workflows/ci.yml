# name: Continuous Integration

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   test:
#     name: Test
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [18.x]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: npm ci

#     - name: Run linter
#       run: npm run lint

#     - name: Run type check
#       run: npm run type-check

#     - name: Run tests
#       run: npm test

#   build:
#     name: Build
#     needs: test
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [18.x]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#         cache: 'npm'

#     - name: Install dependencies
#       run: npm ci

#     - name: Build
#       run: npm run build

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v3
#       with:
#         name: build
#         path: |
#           apps/*/dist
#           packages/*/dist
#         retention-days: 7

#   docker:
#     name: Docker Build
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Login to DockerHub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_TOKEN }}

#     - name: Build and push Frontend
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         file: ./apps/web/Dockerfile
#         push: true
#         tags: eremois/frontend:latest

#     - name: Build and push Backend
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         file: ./apps/api/Dockerfile
#         push: true
#         tags: eremois/backend:latest

#   deploy-staging:
#     name: Deploy to Staging
#     needs: docker
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     environment: staging

#     steps:
#     - uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-west-2

#     - name: Update ECS services
#       run: |
#         aws ecs update-service --cluster eremois-staging --service frontend --force-new-deployment
#         aws ecs update-service --cluster eremois-staging --service backend --force-new-deployment

#   deploy-production:
#     name: Deploy to Production
#     needs: deploy-staging
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main'
#     environment:
#       name: production
#       url: https://eremois.dev

#     steps:
#     - uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-west-2

#     - name: Update ECS services
#       run: |
#         aws ecs update-service --cluster eremois-production --service frontend --force-new-deployment
#         aws ecs update-service --cluster eremois-production --service backend --force-new-deployment

#     - name: Notify deployment
#       uses: slackapi/slack-github-action@v1.23.0
#       with:
#         channel-id: 'deployments'
#         slack-message: 'Production deployment completed for erÄ“mois :rocket:'
#       env:
#         SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 